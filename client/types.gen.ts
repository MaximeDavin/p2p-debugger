// This file is auto-generated by @hey-api/openapi-ts

export type NetworkIdentity = {
    /**
     * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
     */
    peer_id?: string;
    /**
     * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
     */
    enr?: string;
    p2p_addresses?: Array<(string & unknown)>;
    discovery_addresses?: Array<(string & unknown)>;
    /**
     * Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata)
     */
    metadata?: {
        seq_number: unknown & string;
        attnets: unknown & string;
        syncnets?: unknown & string;
    };
};

export type Peer = {
    /**
     * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
     */
    peer_id?: string;
    /**
     * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
     */
    enr?: string | null;
    last_seen_p2p_address?: string & unknown;
    state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
    direction?: 'inbound' | 'outbound';
};

export type state = 'disconnected' | 'connecting' | 'connected' | 'disconnecting';

export type direction = 'inbound' | 'outbound';

/**
 * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
 */
export type PeerId = string;

export type PeerConnectionState = 'disconnected' | 'connecting' | 'connected' | 'disconnecting';

export type PeerConnectionDirection = 'inbound' | 'outbound';

export type GenesisTime = string & unknown;

/**
 * A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
 */
export type Version = string;

export type GetNetworkIdentityResponse = {
    data?: {
        /**
         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
         */
        peer_id?: string;
        /**
         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
         */
        enr?: string;
        p2p_addresses?: Array<(string & unknown)>;
        discovery_addresses?: Array<(string & unknown)>;
        /**
         * Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata)
         */
        metadata?: {
            seq_number: unknown & string;
            attnets: unknown & string;
            syncnets?: unknown & string;
        };
    };
};

export type GetNetworkIdentityError = unknown;

export type GetPeersData = {
    query?: {
        direction?: Array<('inbound' | 'outbound')>;
        state?: Array<('disconnected' | 'connecting' | 'connected' | 'disconnecting')>;
    };
};

export type GetPeersResponse = {
    data?: Array<{
        /**
         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
         */
        peer_id?: string;
        /**
         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
         */
        enr?: string | null;
        last_seen_p2p_address?: string & unknown;
        state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
        direction?: 'inbound' | 'outbound';
    }>;
    meta?: {
        /**
         * Total number of items
         */
        count?: number;
    };
};

export type GetPeersError = unknown;

export type GetPeerData = {
    path: {
        peer_id: string;
    };
};

export type GetPeerResponse = {
    data?: {
        /**
         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
         */
        peer_id?: string;
        /**
         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
         */
        enr?: string | null;
        last_seen_p2p_address?: string & unknown;
        state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
        direction?: 'inbound' | 'outbound';
    };
};

export type GetPeerError = unknown;

export type GetPeerCountResponse = {
    data?: {
        disconnected?: string & unknown;
        connecting?: string & unknown;
        connected?: string & unknown;
        disconnecting?: string & unknown;
    };
};

export type GetPeerCountError = unknown;

export type GetNodeVersionResponse = {
    data?: {
        /**
         * A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
         */
        version?: string;
    };
};

export type GetNodeVersionError = unknown;

export type GetSyncingStatusResponse = {
    data?: {
        head_slot?: unknown & string;
        sync_distance?: unknown & string;
        is_syncing?: boolean & unknown;
        is_optimistic?: boolean & unknown;
        el_offline?: boolean & unknown;
    };
};

export type GetSyncingStatusError = unknown;

export type GetHealthData = {
    query?: {
        /**
         * Customize syncing status instead of default status code (206)
         */
        syncing_status?: number;
    };
};

export type GetHealthResponse = unknown;

export type GetHealthError = unknown;

export type $OpenApiTs = {
    '/eth/v1/node/identity': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: {
                        /**
                         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
                         */
                        peer_id?: string;
                        /**
                         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
                         */
                        enr?: string;
                        p2p_addresses?: Array<(string & unknown)>;
                        discovery_addresses?: Array<(string & unknown)>;
                        /**
                         * Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata)
                         */
                        metadata?: {
                            seq_number: unknown & string;
                            attnets: unknown & string;
                            syncnets?: unknown & string;
                        };
                    };
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/peers': {
        get: {
            req: GetPeersData;
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: Array<{
                        /**
                         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
                         */
                        peer_id?: string;
                        /**
                         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
                         */
                        enr?: string | null;
                        last_seen_p2p_address?: string & unknown;
                        state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
                        direction?: 'inbound' | 'outbound';
                    }>;
                    meta?: {
                        /**
                         * Total number of items
                         */
                        count?: number;
                    };
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/peers/{peer_id}': {
        get: {
            req: GetPeerData;
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: {
                        /**
                         * Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
                         */
                        peer_id?: string;
                        /**
                         * Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
                         */
                        enr?: string | null;
                        last_seen_p2p_address?: string & unknown;
                        state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
                        direction?: 'inbound' | 'outbound';
                    };
                };
                /**
                 * The peer ID supplied could not be parsed
                 */
                '400': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
                /**
                 * Peer not found
                 */
                '404': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/peer_count': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: {
                        disconnected?: string & unknown;
                        connecting?: string & unknown;
                        connected?: string & unknown;
                        disconnecting?: string & unknown;
                    };
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/version': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: {
                        /**
                         * A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
                         */
                        version?: string;
                    };
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/syncing': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    data?: {
                        head_slot?: unknown & string;
                        sync_distance?: unknown & string;
                        is_syncing?: boolean & unknown;
                        is_optimistic?: boolean & unknown;
                        el_offline?: boolean & unknown;
                    };
                };
                /**
                 * Beacon node internal error.
                 */
                '500': {
                    /**
                     * Either specific error code in case of invalid request or http status code
                     */
                    code?: number;
                    /**
                     * Message describing error
                     */
                    message?: string;
                    /**
                     * Optional stacktraces, sent when node is in debug mode
                     */
                    stacktraces?: Array<(string)>;
                };
            };
        };
    };
    '/eth/v1/node/health': {
        get: {
            req: GetHealthData;
            res: {
                /**
                 * Node is ready
                 */
                '200': unknown;
                /**
                 * Invalid syncing status code
                 */
                '400': unknown;
                /**
                 * Node not initialized or having issues
                 */
                '503': unknown;
            };
        };
    };
};