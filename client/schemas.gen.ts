// This file is auto-generated by @hey-api/openapi-ts

export const $NetworkIdentity = {
    type: 'object',
    properties: {
        peer_id: {
            type: 'string',
            description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)',
            example: 'QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
        },
        enr: {
            type: 'string',
            description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)',
            example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'
        },
        p2p_addresses: {
            type: 'array',
            items: {
                allOf: [
                    {
                        type: 'string',
                        description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)',
                        example: '/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
                    },
                    {
                        description: "Node's addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)"
                    }
                ]
            }
        },
        discovery_addresses: {
            type: 'array',
            items: {
                allOf: [
                    {
                        type: 'string',
                        description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)',
                        example: '/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
                    },
                    {
                        description: "Node's addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)"
                    },
                    {
                        example: '/ip4/7.7.7.7/udp/30303/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
                    }
                ]
            }
        },
        metadata: {
            type: 'object',
            description: 'Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata)',
            required: ['seq_number', 'attnets'],
            properties: {
                seq_number: {
                    allOf: [
                        {
                            description: "Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1."
                        },
                        {
                            type: 'string',
                            example: '1'
                        }
                    ]
                },
                attnets: {
                    allOf: [
                        {
                            description: "Bitvector representing the node's persistent attestation subnet subscriptions."
                        },
                        {
                            type: 'string',
                            format: 'hex',
                            pattern: '^0x[a-fA-F0-9]{2,}$'
                        },
                        {
                            example: '0x0000000000000000'
                        }
                    ]
                },
                syncnets: {
                    allOf: [
                        {
                            description: "Bitvector representing the node's sync committee subnet subscriptions. This metadata is not present in phase0, but will be present in Altair."
                        },
                        {
                            type: 'string',
                            format: 'hex',
                            pattern: '^0x[a-fA-F0-9]{2,}$'
                        },
                        {
                            example: '0x0f'
                        }
                    ]
                }
            }
        }
    }
} as const;

export const $Peer = {
    type: 'object',
    properties: {
        peer_id: {
            type: 'string',
            description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)',
            example: 'QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
        },
        enr: {
            nullable: true,
            type: 'string',
            description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)',
            example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'
        },
        last_seen_p2p_address: {
            allOf: [
                {
                    type: 'string',
                    description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)',
                    example: '/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
                },
                {
                    description: 'Multiaddrs used in last peer connection.'
                }
            ]
        },
        state: {
            type: 'string',
            enum: ['disconnected', 'connecting', 'connected', 'disconnecting']
        },
        direction: {
            type: 'string',
            enum: ['inbound', 'outbound']
        }
    }
} as const;

export const $PeerId = {
    type: 'string',
    description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)',
    example: 'QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N'
} as const;

export const $PeerConnectionState = {
    type: 'string',
    enum: ['disconnected', 'connecting', 'connected', 'disconnecting']
} as const;

export const $PeerConnectionDirection = {
    type: 'string',
    enum: ['inbound', 'outbound']
} as const;

export const $GenesisTime = {
    allOf: [
        {
            type: 'string',
            example: '1'
        },
        {
            example: '1590832934'
        },
        {
            description: 'The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.'
        }
    ]
} as const;

export const $Version = {
    type: 'string',
    description: 'A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).',
    example: 'Lighthouse/v0.1.5 (Linux x86_64)'
} as const;