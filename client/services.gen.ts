// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type { GetNetworkIdentityError, GetNetworkIdentityResponse, GetPeersData, GetPeersError, GetPeersResponse, GetPeerData, GetPeerError, GetPeerResponse, GetPeerCountError, GetPeerCountResponse, GetNodeVersionError, GetNodeVersionResponse, GetSyncingStatusError, GetSyncingStatusResponse, GetHealthData, GetHealthError, GetHealthResponse } from './types.gen';

export class NodeService {
    /**
     * Get node network identity
     * Retrieves data about the node's network presence
     */
    public static getNetworkIdentity(options?: Options) {
        return (options?.client ?? client).get<GetNetworkIdentityResponse, GetNetworkIdentityError>({
            ...options,
            url: '/eth/v1/node/identity'
        });
    }
    
    /**
     * Get node network peers
     * Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions
     */
    public static getPeers(options?: Options<GetPeersData>) {
        return (options?.client ?? client).get<GetPeersResponse, GetPeersError>({
            ...options,
            url: '/eth/v1/node/peers'
        });
    }
    
    /**
     * Get peer
     * Retrieves data about the given peer
     */
    public static getPeer(options: Options<GetPeerData>) {
        return (options?.client ?? client).get<GetPeerResponse, GetPeerError>({
            ...options,
            url: '/eth/v1/node/peers/{peer_id}'
        });
    }
    
    /**
     * Get peer count
     * Retrieves number of known peers.
     */
    public static getPeerCount(options?: Options) {
        return (options?.client ?? client).get<GetPeerCountResponse, GetPeerCountError>({
            ...options,
            url: '/eth/v1/node/peer_count'
        });
    }
    
    /**
     * Get version string of the running beacon node.
     * Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.
     */
    public static getNodeVersion(options?: Options) {
        return (options?.client ?? client).get<GetNodeVersionResponse, GetNodeVersionError>({
            ...options,
            url: '/eth/v1/node/version'
        });
    }
    
    /**
     * Get node syncing status
     * Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.
     */
    public static getSyncingStatus(options?: Options) {
        return (options?.client ?? client).get<GetSyncingStatusResponse, GetSyncingStatusError>({
            ...options,
            url: '/eth/v1/node/syncing'
        });
    }
    
    /**
     * Get health check
     * Returns node health status in http status codes. Useful for load balancers.
     */
    public static getHealth(options?: Options<GetHealthData>) {
        return (options?.client ?? client).get<GetHealthResponse, GetHealthError>({
            ...options,
            url: '/eth/v1/node/health'
        });
    }
    
}

export class ValidatorRequiredApiService {
    /**
     * Get node syncing status
     * Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.
     */
    public static getSyncingStatus(options?: Options) {
        return (options?.client ?? client).get<GetSyncingStatusResponse, GetSyncingStatusError>({
            ...options,
            url: '/eth/v1/node/syncing'
        });
    }
    
}